const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º axios –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
const { execSync } = require('child_process');

const token = '8180715464:AAGjcbhKQ-rdpGyB_Uv5_YRctduASPzx8yo';
const CRYPTO_BOT_TOKEN = '419912:AA6EPR86K0sN4MztZ3UUaAI9fjNZaYTsLEF';
const ADMIN_CHAT_ID = '484715378';
const PORT = process.env.PORT || 3000;
const APP_URL = 'https://meme-generator-bot.onrender.com';

const app = express();
app.use(cors({ origin: '*', methods: ['GET', 'POST'] }));
app.use(express.json({ limit: '1mb' }));
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());

// üì¶ –ë–æ—Ç –±–µ–∑ polling
const bot = new TelegramBot(token);
bot.setWebHook(`${APP_URL}/bot${token}`); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook

// üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// üì§ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–º–æ–≤
app.post('/api/upload', async (req, res) => {
  try {
    const { image, userId, chatId } = req.body;
    if (!image || !chatId) {
      return res.status(400).json({ message: 'Invalid image data' });
    }

    const buffer = Buffer.from(image, 'base64');
    await bot.sendPhoto(chatId, buffer, {
      caption: '–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤!',
      parse_mode: 'Markdown',
      filename: 'meme.webp'
    });

    res.json({ status: 'ok' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    if (ADMIN_CHAT_ID) {
      await bot.sendMessage(ADMIN_CHAT_ID, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n${error.stack}`);
    }
    res.status(500).json({ message: 'Server error' });
  }
});

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ CryptoBot —Å—á—ë—Ç–∞
app.post('/create-crypto-invoice', async (req, res) => {
  const { telegram_id } = req.body;

  try {
    const invoiceRes = await axios.post(
      'https://pay.crypt.bot/api/createInvoice',
      {
        asset: 'TON',
        amount: 1, // 5 TON, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        description: '–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏',
        hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!',
        payload: telegram_id.toString(),
        paid_btn_name: 'url',
        paid_btn_url: 'https://t.me/BigMemeEnergyBot', // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏
      },
      {
        headers: {
          'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
          'Content-Type': 'application/json'
        }
      }
    );

    const url = invoiceRes.data.result.pay_url;
    res.json({ url });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CryptoBot —Å—á—ë—Ç–∞:', err.response?.data || err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞' });
  }
});

// üì• –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π CryptoBot
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const webAppUrl = 'https://meme-generator-inky-one.vercel.app/';

  try {
    const invoice = await axios.post(
      `${APP_URL}/create-crypto-invoice`,
      { telegram_id: chatId },
      { headers: { 'Content-Type': 'application/json' } }
    );

    const payUrl = invoice.data.url;

    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ–º –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', web_app: { url: webAppUrl } }],
          [{ text: '–û–ø–ª–∞—Ç–∏—Ç—å 5 TON', url: payUrl }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:', error.message);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// üåê Webhook –æ—Ç CryptoBot (–æ–ø–ª–∞—Ç–∞)
app.post('/crypto-webhook', async (req, res) => {
  const update = req.body;

  if (update.event === 'invoice_paid') {
    const telegramId = update.payload;

    await bot.sendMessage(telegramId, '‚úÖ –ü–ª–∞—Ç—ë–∂ –≤ TON —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É üôå');
  }

  res.sendStatus(200);
});

app.listen(PORT, () => {
  try {
    const commit = execSync('git log -1 --pretty=format:"%h - %s"').toString();
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${commit}`);
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ');
  }

  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
