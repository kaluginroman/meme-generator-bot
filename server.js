require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const bodyParser = require('body-parser');
const axios = require('axios');
const { execSync } = require('child_process');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY); // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π LIVE-–∫–ª—é—á Stripe

const token = process.env.TELEGRAM_BOT_TOKEN;
const CRYPTO_BOT_TOKEN = process.env.CRYPTO_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET;
const APP_URL = 'https://meme-generator-bot.onrender.com';
const PORT = process.env.PORT || 3000;

const app = express();
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Telegram Bot
const bot = new TelegramBot(token);
bot.setWebHook(`${APP_URL}/bot${token}`);

app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Upload meme
app.post('/api/upload', async (req, res) => {
  try {
    const { image, userId, chatId } = req.body;
    if (!image || !chatId) {
      return res.status(400).json({ message: 'Invalid image data' });
    }

    const buffer = Buffer.from(image, 'base64');
    await bot.sendPhoto(chatId, buffer, {
      caption: '–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤!',
      parse_mode: 'Markdown',
      filename: 'meme.webp'
    });

    res.json({ status: 'ok' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    if (ADMIN_CHAT_ID) {
      await bot.sendMessage(ADMIN_CHAT_ID, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n${error.stack}`);
    }
    res.status(500).json({ message: 'Server error' });
  }
});

// ‚úÖ CryptoBot invoice
app.post('/create-crypto-invoice', async (req, res) => {
  const { telegram_id } = req.body;

  try {
    const invoiceRes = await axios.post(
      'https://pay.crypt.bot/api/createInvoice',
      {
        asset: 'USDT',
        amount: 1,
        description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
        hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!',
        payload: telegram_id.toString(),
        paid_btn_name: 'openBot',
        paid_btn_url: 'https://t.me/BigMemeEnergyBot',
      },
      {
        headers: {
          'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
          'Content-Type': 'application/json'
        }
      }
    );

    const url = invoiceRes.data.result.pay_url;
    res.json({ url });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CryptoBot —Å—á—ë—Ç–∞:', err.response?.data || err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞' });
  }
});

// ‚úÖ Stripe Checkout
app.post('/create-stripe-session', async (req, res) => {
  const { telegram_id } = req.body;

  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'usd',
          product_data: {
            name: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
          },
          unit_amount: 100, // 1 USD –≤ —Ü–µ–Ω—Ç–∞—Ö
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: `${APP_URL}/success.html`,
      cancel_url: `${APP_URL}/cancel.html`,
      metadata: { telegram_id }
    });

    res.json({ url: session.url });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stripe-—Å–µ—Å—Å–∏–∏:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞' });
  }
});

// ‚úÖ Stripe Webhook
app.post('/stripe-webhook', express.raw({ type: 'application/json' }), (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Stripe webhook:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object;
    const telegramId = session.metadata.telegram_id;

    bot.sendMessage(telegramId, '‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Stripe —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É üôå');
  }

  res.sendStatus(200);
});

// ‚úÖ CryptoBot webhook
app.post('/crypto-webhook', async (req, res) => {
  const update = req.body;

  if (update.event === 'invoice_paid') {
    const telegramId = update.payload;

    await bot.sendMessage(telegramId, '‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CryptoBot —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ üôå');
  }

  res.sendStatus(200);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const webAppUrl = 'https://meme-generator-inky-one.vercel.app/';

  try {
    const cryptoInvoice = await axios.post(`${APP_URL}/create-crypto-invoice`, { telegram_id: chatId });
    const stripeInvoice = await axios.post(`${APP_URL}/create-stripe-session`, { telegram_id: chatId });

    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ–º:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', web_app: { url: webAppUrl } }],
          [{ text: '–û–ø–ª–∞—Ç–∏—Ç—å 1 USDT (CryptoBot)', url: cryptoInvoice.data.url }],
          [{ text: '–û–ø–ª–∞—Ç–∏—Ç—å 1 USD (Stripe)', url: stripeInvoice.data.url }],
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:', error.message);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

app.listen(PORT, () => {
  try {
    const commit = execSync('git log -1 --pretty=format:"%h - %s"').toString();
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${commit}`);
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ');
  }

  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
